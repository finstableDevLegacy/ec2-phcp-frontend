/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TranscryptInterface extends ethers.utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "changeRootAdmin(address)": FunctionFragment;
    "collectFee(address,uint256,address)": FunctionFragment;
    "dealerContract()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeClaimer()": FunctionFragment;
    "feeDecimals()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "orderStatus(uint256)": FunctionFragment;
    "purchase(uint256,address,address[],uint256,uint256,uint256,address)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "rootAdmin()": FunctionFragment;
    "setDealerContract(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeClaimer(address)": FunctionFragment;
    "setSwapRouter(address)": FunctionFragment;
    "shifter()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "tokenFeeReserves(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeRootAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dealerContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeClaimer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "orderStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      BigNumberish,
      string,
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "rootAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDealerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeClaimer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shifter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFeeReserves",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRootAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeClaimer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDealerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeClaimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shifter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFeeReserves",
    data: BytesLike
  ): Result;

  events: {
    "AdminUpdated(address,uint256)": EventFragment;
    "DealerContractChanged(address,address)": EventFragment;
    "FeeChanged(uint256,uint256)": EventFragment;
    "FeeClaimerChanged(address,address)": EventFragment;
    "FeeCollected(address,address,uint256)": EventFragment;
    "Purchased(uint256,address,address,address,address,uint256,uint256,uint256,address)": EventFragment;
    "RootAdminChanged(address,address)": EventFragment;
    "SwapRouterChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealerContractChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaimerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapRouterChanged"): EventFragment;
}

export type AdminUpdatedEvent = TypedEvent<
  [string, BigNumber] & { account: string; isAdmin: BigNumber }
>;

export type DealerContractChangedEvent = TypedEvent<
  [string, string] & { oldDealerContract: string; newDealerContract: string }
>;

export type FeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type FeeClaimerChangedEvent = TypedEvent<
  [string, string] & { oldFeeClaimer: string; newFeeClaimer: string }
>;

export type FeeCollectedEvent = TypedEvent<
  [string, string, BigNumber] & {
    beneficiary: string;
    token: string;
    amount: BigNumber;
  }
>;

export type PurchasedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    orderId: BigNumber;
    payer: string;
    merchant: string;
    inputToken: string;
    outputToken: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
    fee: BigNumber;
    dealer: string;
  }
>;

export type RootAdminChangedEvent = TypedEvent<
  [string, string] & { oldRoot: string; newRoot: string }
>;

export type SwapRouterChangedEvent = TypedEvent<
  [string, string] & { oldSwapRouter: string; newSwapRouter: string }
>;

export class Transcrypt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TranscryptInterface;

  functions: {
    addAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRootAdmin(
      _newRootAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectFee(
      token: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dealerContract(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeClaimer(overrides?: CallOverrides): Promise<[string]>;

    feeDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAdmin(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    orderStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchase(
      orderId: BigNumberish,
      merchant: string,
      tokens: string[],
      amountInMax: BigNumberish,
      amountOut: BigNumberish,
      deadline: BigNumberish,
      dealer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rootAdmin(overrides?: CallOverrides): Promise<[string]>;

    setDealerContract(
      newDealerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeClaimer(
      newFeeClaimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapRouter(
      newSwapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shifter(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    tokenFeeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRootAdmin(
    _newRootAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectFee(
    token: string,
    amount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dealerContract(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeClaimer(overrides?: CallOverrides): Promise<string>;

  feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  isAdmin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  orderStatus(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    orderId: BigNumberish,
    merchant: string,
    tokens: string[],
    amountInMax: BigNumberish,
    amountOut: BigNumberish,
    deadline: BigNumberish,
    dealer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rootAdmin(overrides?: CallOverrides): Promise<string>;

  setDealerContract(
    newDealerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeClaimer(
    newFeeClaimer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapRouter(
    newSwapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shifter(overrides?: CallOverrides): Promise<BigNumber>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  tokenFeeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    changeRootAdmin(
      _newRootAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFee(
      token: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dealerContract(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeClaimer(overrides?: CallOverrides): Promise<string>;

    feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    orderStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      orderId: BigNumberish,
      merchant: string,
      tokens: string[],
      amountInMax: BigNumberish,
      amountOut: BigNumberish,
      deadline: BigNumberish,
      dealer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    rootAdmin(overrides?: CallOverrides): Promise<string>;

    setDealerContract(
      newDealerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeClaimer(
      newFeeClaimer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapRouter(
      newSwapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shifter(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    tokenFeeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminUpdated(address,uint256)"(
      account?: string | null,
      isAdmin?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; isAdmin: BigNumber }
    >;

    AdminUpdated(
      account?: string | null,
      isAdmin?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; isAdmin: BigNumber }
    >;

    "DealerContractChanged(address,address)"(
      oldDealerContract?: null,
      newDealerContract?: null
    ): TypedEventFilter<
      [string, string],
      { oldDealerContract: string; newDealerContract: string }
    >;

    DealerContractChanged(
      oldDealerContract?: null,
      newDealerContract?: null
    ): TypedEventFilter<
      [string, string],
      { oldDealerContract: string; newDealerContract: string }
    >;

    "FeeChanged(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    FeeChanged(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "FeeClaimerChanged(address,address)"(
      oldFeeClaimer?: string | null,
      newFeeClaimer?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldFeeClaimer: string; newFeeClaimer: string }
    >;

    FeeClaimerChanged(
      oldFeeClaimer?: string | null,
      newFeeClaimer?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldFeeClaimer: string; newFeeClaimer: string }
    >;

    "FeeCollected(address,address,uint256)"(
      beneficiary?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; token: string; amount: BigNumber }
    >;

    FeeCollected(
      beneficiary?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; token: string; amount: BigNumber }
    >;

    "Purchased(uint256,address,address,address,address,uint256,uint256,uint256,address)"(
      orderId?: null,
      payer?: string | null,
      merchant?: string | null,
      inputToken?: null,
      outputToken?: string | null,
      amountIn?: null,
      amountOut?: null,
      fee?: null,
      dealer?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        orderId: BigNumber;
        payer: string;
        merchant: string;
        inputToken: string;
        outputToken: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        fee: BigNumber;
        dealer: string;
      }
    >;

    Purchased(
      orderId?: null,
      payer?: string | null,
      merchant?: string | null,
      inputToken?: null,
      outputToken?: string | null,
      amountIn?: null,
      amountOut?: null,
      fee?: null,
      dealer?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        orderId: BigNumber;
        payer: string;
        merchant: string;
        inputToken: string;
        outputToken: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        fee: BigNumber;
        dealer: string;
      }
    >;

    "RootAdminChanged(address,address)"(
      oldRoot?: string | null,
      newRoot?: string | null
    ): TypedEventFilter<[string, string], { oldRoot: string; newRoot: string }>;

    RootAdminChanged(
      oldRoot?: string | null,
      newRoot?: string | null
    ): TypedEventFilter<[string, string], { oldRoot: string; newRoot: string }>;

    "SwapRouterChanged(address,address)"(
      oldSwapRouter?: null,
      newSwapRouter?: null
    ): TypedEventFilter<
      [string, string],
      { oldSwapRouter: string; newSwapRouter: string }
    >;

    SwapRouterChanged(
      oldSwapRouter?: null,
      newSwapRouter?: null
    ): TypedEventFilter<
      [string, string],
      { oldSwapRouter: string; newSwapRouter: string }
    >;
  };

  estimateGas: {
    addAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRootAdmin(
      _newRootAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectFee(
      token: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dealerContract(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeClaimer(overrides?: CallOverrides): Promise<BigNumber>;

    feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    orderStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      orderId: BigNumberish,
      merchant: string,
      tokens: string[],
      amountInMax: BigNumberish,
      amountOut: BigNumberish,
      deadline: BigNumberish,
      dealer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rootAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    setDealerContract(
      newDealerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeClaimer(
      newFeeClaimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapRouter(
      newSwapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shifter(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFeeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRootAdmin(
      _newRootAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectFee(
      token: string,
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dealerContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeClaimer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      orderId: BigNumberish,
      merchant: string,
      tokens: string[],
      amountInMax: BigNumberish,
      amountOut: BigNumberish,
      deadline: BigNumberish,
      dealer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rootAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDealerContract(
      newDealerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeClaimer(
      newFeeClaimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      newSwapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shifter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFeeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
